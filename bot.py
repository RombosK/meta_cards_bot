import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import callback_query
from aiogram.utils import executor
from aiogram import types

from config import Config, load_config

config: Config = load_config()
PHOTO_FOLDER = 'photos'
for admin_id in config.tg_bot.admin_ids:
    ADMIN_ID = admin_id
bot: Bot = Bot(token=config.tg_bot.token, parse_mode='HTML')
dp: Dispatcher = Dispatcher(bot)

photo_files = os.listdir(PHOTO_FOLDER)

random.shuffle(photo_files)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ
random.choice(photo_files)


# def create_keyboard():
#     keyboard = types.InlineKeyboardMarkup()
#     for i in range(100):  # –°–æ–∑–¥–∞–µ–º 100 –∫–Ω–æ–ø–æ–∫
#         button = types.InlineKeyboardButton(text=f"Button {i + 1}", callback_data=f"button_{i + 1}")
#         keyboard.add(button)
#     return keyboard

# import glob
# from PIL import Image


@dp.message_handler(commands=['start', 'restart'])
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üé≤', callback_data='get_photo')
    button_2 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚è≥', callback_data='restart_bot')
    keyboard.add(button_1)
    keyboard.add(button_2)
    await message.answer("–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∑–Ω–∞–Ω–∏–µ–º –∏ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–π "
                         "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –∫–æ—É—á–∏–Ω–≥–µ, —Ç–µ—Ä–∞–ø–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö. –≠—Ç–æ –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫, –Ω–∞ –∫–∞–∂–¥–æ–π"
                         " –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ –º–µ—Ç–∞—Ñ–æ—Ä–∞, —Å–∏–º–≤–æ–ª, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç "
                         "–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ —Ü–µ–ª—å.–û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —É–ª–æ–≤–∏—Ç—å —Ç–æ–Ω–∫–æ—Å—Ç–∏ –∏"
                         " –Ω—é–∞–Ω—Å—ã –Ω–µ–æ—Å–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º, —É—á–∏—Ç—ã–≤–∞—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç, –ª–∏—á–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏,"
                         " –∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –º–æ—â–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—è, –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "
                         "–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n"
                         "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞–¥ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º,—á—ë—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –∑–∞—Ç–µ–º "
                         "–≤—ã—Ç—è–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É.\n\n"
                         "–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Å–∫–∞–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –∫–Ω–æ–ø–∫–æ–π. \n\n"
                         "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–¥–µ—è –ê–ª–∏–Ω—ã –ú–∞–ª–∏–Ω–æ–≤—Å–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ www.metacards.fun",
                         reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'get_photo')
async def process_callback_get_photo(callback_query: types.CallbackQuery):
    photo_file = photo_files.pop(0)
    with open(os.path.join(PHOTO_FOLDER, photo_file), 'rb') as photo:
        # img = random.choice(glob.glob('photos/*.jpg'))
        # jpg = Image.open(img, + 'r')

        keyboard = types.InlineKeyboardMarkup()
        button_more_photo = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üé≤', callback_data='more_photo')
        button_2 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚è≥', callback_data='restart_bot')
        keyboard.add(button_more_photo)
        keyboard.add(button_2)
        await bot.send_photo(callback_query.from_user.id, photo, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == 'more_photo')
async def process_callback_more_photo(callback_query: types.CallbackQuery):
    photo_file = photo_files.pop(0)  # Take the next file from the list
    with open(os.path.join(PHOTO_FOLDER, photo_file), 'rb') as photo:
        keyboard = types.InlineKeyboardMarkup()
        button_more_photo = types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å üé≤', callback_data='more_photo')
        button_2 = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚è≥', callback_data='restart_bot')
        keyboard.add(button_more_photo)
        keyboard.add(button_2)
        await bot.send_photo(callback_query.from_user.id, photo, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data == 'restart_bot')
async def process_callback_restart_bot(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω ‚öõ", show_alert=True)
    await bot.send_message(callback_query.from_user.id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚öõ")


@dp.message_handler(lambda message: message.from_user.id == ADMIN_ID, commands=['admin'])
async def cmd_admin(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É ü™Ñ', callback_data='add_photo')
    # button_2 = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='remove_photo')
    keyboard.add(button_1)
    # keyboard.add(button_2)
    await message.reply("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚ö°‚ö°‚ö°", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'add_photo')
async def process_callback_add_photo(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")


@dp.message_handler(lambda message: message.from_user.id == ADMIN_ID, content_types=['photo'])
async def handle_docs_photo(message):
    file_info = await bot.get_file(message.photo[-1].file_id)
    if file_info.file_path:
        file_name = file_info.file_path.split('/')[-1]
        await bot.download_file(file_info.file_path, destination=os.path.join(PHOTO_FOLDER, file_name))
        await message.reply("–ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã")


# @dp.callback_query_handler(lambda c: c.data == 'remove_photo')
# async def process_callback_remove_photo(callback_query: types.CallbackQuery):
#     keyboard = create_keyboard()
#     # keyboard = types.InlineKeyboardMarkup()
#     for photo in photo_files:
#         button = types.InlineKeyboardButton(text=photo, callback_data=f'remove_{photo}')
#         keyboard.add(button)
#     await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=keyboard)
#
#
# @dp.callback_query_handler(lambda c: c.data.startswith('remove_'))
# async def process_callback_remove_photo_confirm(callback_query: types.CallbackQuery):
#     photo_file = callback_query.data.split('_')[1]
#     os.remove(os.path.join(PHOTO_FOLDER, photo_file))
#     photo_files.remove(photo_file)
#     await bot.answer_callback_query(callback_query.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

